// Location Selector cho ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam
class VietnamLocationSelector {
  constructor() {
    this.addressAPI = new VietnamAddressAPI();
    this.initializeSelectors();
    this.loadProvinces();
  }

  initializeSelectors() {
    // ƒêi·ªÉm A
    this.pointAProvince = document.getElementById("pointAProvince");
    this.pointAWard = document.getElementById("pointAWard");
    this.pointACoords = document.getElementById("pointACoords");

    // ƒêi·ªÉm B
    this.pointBProvince = document.getElementById("pointBProvince");
    this.pointBWard = document.getElementById("pointBWard");
    this.pointBCoords = document.getElementById("pointBCoords");

    this.setupEventListeners();
  }

  setupEventListeners() {
    // ƒêi·ªÉm A
    this.pointAProvince.addEventListener("change", () =>
      this.onProvinceChange("A")
    );
    this.pointAWard.addEventListener("change", () => this.onWardChange("A"));

    // ƒêi·ªÉm B
    this.pointBProvince.addEventListener("change", () =>
      this.onProvinceChange("B")
    );
    this.pointBWard.addEventListener("change", () => this.onWardChange("B"));
  }

  async loadProvinces() {
    try {
      console.log("üîÑ ƒêang t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë t·ª´ API...");

      // Show loading indicator
      this.showLoadingIndicator("ƒêang t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë...");

      const provinces = await this.addressAPI.getProvinces(2); // mode=2 ƒë·ªÉ l·∫•y t·ªânh m·ªõi

      if (!provinces || provinces.length === 0) {
        console.warn(
          "Kh√¥ng c√≥ d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh"
        );
        this.showNotification(
          "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh",
          "warning"
        );
        // Comprehensive fallback data
        const fallbackProvinces = [
          { id: 1, name: "H√† N·ªôi" },
          { id: 2, name: "TP. H·ªì Ch√≠ Minh" },
          { id: 3, name: "ƒê√† N·∫µng" },
          { id: 4, name: "H·∫£i Ph√≤ng" },
          { id: 5, name: "C·∫ßn Th∆°" },
          { id: 6, name: "An Giang" },
          { id: 7, name: "B√† R·ªãa - V≈©ng T√†u" },
          { id: 8, name: "B·∫Øc Giang" },
          { id: 9, name: "B·∫Øc K·∫°n" },
          { id: 10, name: "B·∫°c Li√™u" },
          { id: 11, name: "B·∫Øc Ninh" },
          { id: 12, name: "B·∫øn Tre" },
          { id: 13, name: "B√¨nh ƒê·ªãnh" },
          { id: 14, name: "B√¨nh D∆∞∆°ng" },
          { id: 15, name: "B√¨nh Ph∆∞·ªõc" },
          { id: 16, name: "B√¨nh Thu·∫≠n" },
          { id: 17, name: "C√† Mau" },
          { id: 18, name: "Cao B·∫±ng" },
          { id: 19, name: "ƒê·∫Øk L·∫Øk" },
          { id: 20, name: "ƒê·∫Øk N√¥ng" },
          { id: 21, name: "ƒêi·ªán Bi√™n" },
          { id: 22, name: "ƒê·ªìng Nai" },
          { id: 23, name: "ƒê·ªìng Th√°p" },
          { id: 24, name: "Gia Lai" },
          { id: 25, name: "H√† Giang" },
          { id: 26, name: "H√† Nam" },
          { id: 27, name: "H√† Tƒ©nh" },
          { id: 28, name: "H·∫£i D∆∞∆°ng" },
          { id: 29, name: "H·∫≠u Giang" },
          { id: 30, name: "H√≤a B√¨nh" },
          { id: 31, name: "H∆∞ng Y√™n" },
          { id: 32, name: "Kh√°nh H√≤a" },
          { id: 33, name: "Ki√™n Giang" },
          { id: 34, name: "Kon Tum" },
          { id: 35, name: "Lai Ch√¢u" },
          { id: 36, name: "L√¢m ƒê·ªìng" },
          { id: 37, name: "L·∫°ng S∆°n" },
          { id: 38, name: "L√†o Cai" },
          { id: 39, name: "Long An" },
          { id: 40, name: "Nam ƒê·ªãnh" },
          { id: 41, name: "Ngh·ªá An" },
          { id: 42, name: "Ninh B√¨nh" },
          { id: 43, name: "Ninh Thu·∫≠n" },
          { id: 44, name: "Ph√∫ Th·ªç" },
          { id: 45, name: "Ph√∫ Y√™n" },
          { id: 46, name: "Qu·∫£ng B√¨nh" },
          { id: 47, name: "Qu·∫£ng Nam" },
          { id: 48, name: "Qu·∫£ng Ng√£i" },
          { id: 49, name: "Qu·∫£ng Ninh" },
          { id: 50, name: "Qu·∫£ng Tr·ªã" },
          { id: 51, name: "S√≥c TrƒÉng" },
          { id: 52, name: "S∆°n La" },
          { id: 53, name: "T√¢y Ninh" },
          { id: 54, name: "Th√°i B√¨nh" },
          { id: 55, name: "Th√°i Nguy√™n" },
          { id: 56, name: "Thanh H√≥a" },
          { id: 57, name: "Th·ª´a Thi√™n Hu·∫ø" },
          { id: 58, name: "Ti·ªÅn Giang" },
          { id: 59, name: "Tr√† Vinh" },
          { id: 60, name: "Tuy√™n Quang" },
          { id: 61, name: "Vƒ©nh Long" },
          { id: 62, name: "Vƒ©nh Ph√∫c" },
          { id: 63, name: "Y√™n B√°i" },
        ];
        this.updateProvinceDropdowns(fallbackProvinces);
        return;
      }

      this.updateProvinceDropdowns(provinces);
      console.log(`‚úÖ ƒê√£ t·∫£i ${provinces.length} t·ªânh/th√†nh ph·ªë t·ª´ API`);
      this.showNotification(
        `‚úÖ ƒê√£ t·∫£i ${provinces.length} t·ªânh/th√†nh ph·ªë t·ª´ API`,
        "success"
      );
      this.hideLoadingIndicator();
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë:", error);
      this.showNotification(
        "‚ö†Ô∏è L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh",
        "error"
      );
      this.hideLoadingIndicator();
      // Fallback data in case of error - same comprehensive list
      const fallbackProvinces = [
        { id: 1, name: "H√† N·ªôi" },
        { id: 2, name: "TP. H·ªì Ch√≠ Minh" },
        { id: 3, name: "ƒê√† N·∫µng" },
        { id: 4, name: "H·∫£i Ph√≤ng" },
        { id: 5, name: "C·∫ßn Th∆°" },
        { id: 6, name: "An Giang" },
        { id: 7, name: "B√† R·ªãa - V≈©ng T√†u" },
        { id: 8, name: "B·∫Øc Giang" },
        { id: 9, name: "B·∫Øc K·∫°n" },
        { id: 10, name: "B·∫°c Li√™u" },
        { id: 11, name: "B·∫Øc Ninh" },
        { id: 12, name: "B·∫øn Tre" },
        { id: 13, name: "B√¨nh ƒê·ªãnh" },
        { id: 14, name: "B√¨nh D∆∞∆°ng" },
        { id: 15, name: "B√¨nh Ph∆∞·ªõc" },
        { id: 16, name: "B√¨nh Thu·∫≠n" },
        { id: 17, name: "C√† Mau" },
        { id: 18, name: "Cao B·∫±ng" },
        { id: 19, name: "ƒê·∫Øk L·∫Øk" },
        { id: 20, name: "ƒê·∫Øk N√¥ng" },
        { id: 21, name: "ƒêi·ªán Bi√™n" },
        { id: 22, name: "ƒê·ªìng Nai" },
        { id: 23, name: "ƒê·ªìng Th√°p" },
        { id: 24, name: "Gia Lai" },
        { id: 25, name: "H√† Giang" },
        { id: 26, name: "H√† Nam" },
        { id: 27, name: "H√† Tƒ©nh" },
        { id: 28, name: "H·∫£i D∆∞∆°ng" },
        { id: 29, name: "H·∫≠u Giang" },
        { id: 30, name: "H√≤a B√¨nh" },
        { id: 31, name: "H∆∞ng Y√™n" },
        { id: 32, name: "Kh√°nh H√≤a" },
        { id: 33, name: "Ki√™n Giang" },
        { id: 34, name: "Kon Tum" },
        { id: 35, name: "Lai Ch√¢u" },
        { id: 36, name: "L√¢m ƒê·ªìng" },
        { id: 37, name: "L·∫°ng S∆°n" },
        { id: 38, name: "L√†o Cai" },
        { id: 39, name: "Long An" },
        { id: 40, name: "Nam ƒê·ªãnh" },
        { id: 41, name: "Ngh·ªá An" },
        { id: 42, name: "Ninh B√¨nh" },
        { id: 43, name: "Ninh Thu·∫≠n" },
        { id: 44, name: "Ph√∫ Th·ªç" },
        { id: 45, name: "Ph√∫ Y√™n" },
        { id: 46, name: "Qu·∫£ng B√¨nh" },
        { id: 47, name: "Qu·∫£ng Nam" },
        { id: 48, name: "Qu·∫£ng Ng√£i" },
        { id: 49, name: "Qu·∫£ng Ninh" },
        { id: 50, name: "Qu·∫£ng Tr·ªã" },
        { id: 51, name: "S√≥c TrƒÉng" },
        { id: 52, name: "S∆°n La" },
        { id: 53, name: "T√¢y Ninh" },
        { id: 54, name: "Th√°i B√¨nh" },
        { id: 55, name: "Th√°i Nguy√™n" },
        { id: 56, name: "Thanh H√≥a" },
        { id: 57, name: "Th·ª´a Thi√™n Hu·∫ø" },
        { id: 58, name: "Ti·ªÅn Giang" },
        { id: 59, name: "Tr√† Vinh" },
        { id: 60, name: "Tuy√™n Quang" },
        { id: 61, name: "Vƒ©nh Long" },
        { id: 62, name: "Vƒ©nh Ph√∫c" },
        { id: 63, name: "Y√™n B√°i" },
      ];
      this.updateProvinceDropdowns(fallbackProvinces);
    }
  }

  updateProvinceDropdowns(provinces) {
    // C·∫≠p nh·∫≠t dropdown t·ªânh cho ƒëi·ªÉm A
    this.pointAProvince.innerHTML =
      '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
    provinces.forEach((province) => {
      const option = document.createElement("option");
      option.value = province.id;
      option.textContent = province.name;
      this.pointAProvince.appendChild(option);
    });

    // C·∫≠p nh·∫≠t dropdown t·ªânh cho ƒëi·ªÉm B
    this.pointBProvince.innerHTML =
      '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
    provinces.forEach((province) => {
      const option = document.createElement("option");
      option.value = province.id;
      option.textContent = province.name;
      this.pointBProvince.appendChild(option);
    });
  }

  async onProvinceChange(point) {
    const provinceSelect =
      point === "A" ? this.pointAProvince : this.pointBProvince;
    const wardSelect = point === "A" ? this.pointAWard : this.pointBWard;
    const coordsSpan = point === "A" ? this.pointACoords : this.pointBCoords;

    const provinceId = provinceSelect.value;

    // Reset ward
    wardSelect.innerHTML = '<option value="">Ch·ªçn x√£/ph∆∞·ªùng</option>';
    wardSelect.disabled = true;
    coordsSpan.textContent = "--";

    if (provinceId) {
      try {
        console.log(`üîÑ ƒêang t·∫£i x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}...`);
        // L·∫•y x√£/ph∆∞·ªùng tr·ª±c ti·∫øp theo t·ªânh
        const wards = await this.addressAPI.getWardsByProvince(provinceId);

        if (!wards || wards.length === 0) {
          console.warn(
            `Kh√¥ng c√≥ d·ªØ li·ªáu x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh`
          );
          // Comprehensive fallback wards based on province
          const fallbackWards = this.getFallbackWardsForProvince(provinceId);
          this.updateWardDropdown(wardSelect, fallbackWards);
        } else {
          this.updateWardDropdown(wardSelect, wards);
        }

        wardSelect.disabled = false;
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${
            wards ? wards.length : 0
          } x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}`
        );
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch x√£/ph∆∞·ªùng:", error);
        // Fallback wards in case of error
        const fallbackWards = this.getFallbackWardsForProvince(provinceId);
        this.updateWardDropdown(wardSelect, fallbackWards);
        wardSelect.disabled = false;
      }
    }
  }

  updateWardDropdown(wardSelect, wards) {
    // C·∫≠p nh·∫≠t dropdown x√£/ph∆∞·ªùng
    wards.forEach((ward) => {
      const option = document.createElement("option");
      option.value = ward.id;
      option.textContent = ward.name;
      wardSelect.appendChild(option);
    });
  }

  // L·∫•y d·ªØ li·ªáu fallback cho x√£/ph∆∞·ªùng theo t·ªânh
  getFallbackWardsForProvince(provinceId) {
    const fallbackWards = {
      // H√† N·ªôi
      1: [
        { id: 1, name: "Ph∆∞·ªùng Ph√∫c X√°" },
        { id: 2, name: "Ph∆∞·ªùng Tr√∫c B·∫°ch" },
        { id: 3, name: "Ph∆∞·ªùng Vƒ©nh Ph√∫" },
        { id: 4, name: "Ph∆∞·ªùng C·ªëng V·ªã" },
        { id: 5, name: "Ph∆∞·ªùng Li·ªÖu Giai" },
        { id: 6, name: "Ph∆∞·ªùng Nguy·ªÖn Trung Tr·ª±c" },
        { id: 7, name: "Ph∆∞·ªùng Qu√°n Th√°nh" },
        { id: 8, name: "Ph∆∞·ªùng Ng·ªçc H√†" },
        { id: 9, name: "Ph∆∞·ªùng ƒêi·ªán Bi√™n" },
        { id: 10, name: "Ph∆∞·ªùng ƒê·ªôi C·∫•n" },
      ],
      // TP. H·ªì Ch√≠ Minh
      2: [
        { id: 1, name: "Ph∆∞·ªùng T√¢n ƒê·ªãnh" },
        { id: 2, name: "Ph∆∞·ªùng ƒêa Kao" },
        { id: 3, name: "Ph∆∞·ªùng B·∫øn Ngh√©" },
        { id: 4, name: "Ph∆∞·ªùng B·∫øn Th√†nh" },
        { id: 5, name: "Ph∆∞·ªùng Nguy·ªÖn Th√°i B√¨nh" },
        { id: 6, name: "Ph∆∞·ªùng Ph·∫°m Ng≈© L√£o" },
        { id: 7, name: "Ph∆∞·ªùng C·∫ßu √îng L√£nh" },
        { id: 8, name: "Ph∆∞·ªùng C√¥ Giang" },
        { id: 9, name: "Ph∆∞·ªùng Nguy·ªÖn C∆∞ Trinh" },
        { id: 10, name: "Ph∆∞·ªùng C·∫ßu Kho" },
      ],
      // ƒê√† N·∫µng
      3: [
        { id: 1, name: "Ph∆∞·ªùng Th·∫°ch Thang" },
        { id: 2, name: "Ph∆∞·ªùng H·∫£i Ch√¢u I" },
        { id: 3, name: "Ph∆∞·ªùng H·∫£i Ch√¢u II" },
        { id: 4, name: "Ph∆∞·ªùng Ph∆∞·ªõc Ninh" },
        { id: 5, name: "Ph∆∞·ªùng H√≤a Thu·∫≠n T√¢y" },
        { id: 6, name: "Ph∆∞·ªùng H√≤a Thu·∫≠n ƒê√¥ng" },
        { id: 7, name: "Ph∆∞·ªùng Nam D∆∞∆°ng" },
        { id: 8, name: "Ph∆∞·ªùng B√¨nh Hi√™n" },
        { id: 9, name: "Ph∆∞·ªùng B√¨nh Thu·∫≠n" },
        { id: 10, name: "Ph∆∞·ªùng H√≤a C∆∞·ªùng B·∫Øc" },
      ],
      // H·∫£i Ph√≤ng
      4: [
        { id: 1, name: "Ph∆∞·ªùng M√°y Chai" },
        { id: 2, name: "Ph∆∞·ªùng M√°y T∆°" },
        { id: 3, name: "Ph∆∞·ªùng L√™ L·ª£i" },
        { id: 4, name: "Ph∆∞·ªùng L√™ Ch√¢n" },
        { id: 5, name: "Ph∆∞·ªùng C√°t D√†i" },
        { id: 6, name: "Ph∆∞·ªùng An Bi√™n" },
        { id: 7, name: "Ph∆∞·ªùng Lam S∆°n" },
        { id: 8, name: "Ph∆∞·ªùng An D∆∞∆°ng" },
        { id: 9, name: "Ph∆∞·ªùng Tr·∫ßn Nguy√™n H√£n" },
        { id: 10, name: "Ph∆∞·ªùng H·ªì Nam" },
      ],
      // C·∫ßn Th∆°
      5: [
        { id: 1, name: "Ph∆∞·ªùng T√¢n An" },
        { id: 2, name: "Ph∆∞·ªùng An H√≤a" },
        { id: 3, name: "Ph∆∞·ªùng Th·ªõi B√¨nh" },
        { id: 4, name: "Ph∆∞·ªùng An Nghi·ªáp" },
        { id: 5, name: "Ph∆∞·ªùng An C∆∞" },
        { id: 6, name: "Ph∆∞·ªùng T√¢n L·ªôc" },
        { id: 7, name: "Ph∆∞·ªùng An Ph√∫" },
        { id: 8, name: "Ph∆∞·ªùng An Kh√°nh" },
        { id: 9, name: "Ph∆∞·ªùng An Th·ªõi" },
        { id: 10, name: "Ph∆∞·ªùng C√°i Kh·∫ø" },
      ],
      // An Giang
      6: [
        { id: 1, name: "Ph∆∞·ªùng M·ªπ B√¨nh" },
        { id: 2, name: "Ph∆∞·ªùng M·ªπ Long" },
        { id: 3, name: "Ph∆∞·ªùng ƒê√¥ng Xuy√™n" },
        { id: 4, name: "Ph∆∞·ªùng M·ªπ Xuy√™n" },
        { id: 5, name: "Ph∆∞·ªùng B√¨nh ƒê·ª©c" },
        { id: 6, name: "Ph∆∞·ªùng B√¨nh Kh√°nh" },
        { id: 7, name: "Ph∆∞·ªùng M·ªπ Ph∆∞·ªõc" },
        { id: 8, name: "Ph∆∞·ªùng M·ªπ Qu√Ω" },
        { id: 9, name: "Ph∆∞·ªùng M·ªπ Th·∫°nh" },
        { id: 10, name: "Ph∆∞·ªùng M·ªπ Th·ªõi" },
      ],
      // B√† R·ªãa - V≈©ng T√†u
      7: [
        { id: 1, name: "Ph∆∞·ªùng 1" },
        { id: 2, name: "Ph∆∞·ªùng 2" },
        { id: 3, name: "Ph∆∞·ªùng 3" },
        { id: 4, name: "Ph∆∞·ªùng 4" },
        { id: 5, name: "Ph∆∞·ªùng 5" },
        { id: 6, name: "Ph∆∞·ªùng 6" },
        { id: 7, name: "Ph∆∞·ªùng 7" },
        { id: 8, name: "Ph∆∞·ªùng 8" },
        { id: 9, name: "Ph∆∞·ªùng 9" },
        { id: 10, name: "Ph∆∞·ªùng 10" },
      ],
      // B·∫Øc Giang
      8: [
        { id: 1, name: "Ph∆∞·ªùng Th·ªç X∆∞∆°ng" },
        { id: 2, name: "Ph∆∞·ªùng Tr·∫ßn Nguy√™n H√£n" },
        { id: 3, name: "Ph∆∞·ªùng Ng√¥ Quy·ªÅn" },
        { id: 4, name: "Ph∆∞·ªùng Tr·∫ßn Ph√∫" },
        { id: 5, name: "Ph∆∞·ªùng L√™ L·ª£i" },
        { id: 6, name: "Ph∆∞·ªùng Ho√†ng VƒÉn Th·ª•" },
        { id: 7, name: "Ph∆∞·ªùng ƒê·ªìng T√¢m" },
        { id: 8, name: "Ph∆∞·ªùng T√¢n M·ªπ" },
        { id: 9, name: "Ph∆∞·ªùng Dƒ©nh K·∫ø" },
        { id: 10, name: "Ph∆∞·ªùng X∆∞∆°ng Giang" },
      ],
    };

    // Tr·∫£ v·ªÅ wards cho t·ªânh c·ª• th·ªÉ ho·∫∑c wards m·∫∑c ƒë·ªãnh
    return fallbackWards[provinceId] || this.getDefaultWards(provinceId);
  }

  // L·∫•y wards m·∫∑c ƒë·ªãnh cho t·ªânh kh√¥ng c√≥ d·ªØ li·ªáu c·ª• th·ªÉ
  getDefaultWards(provinceId) {
    const defaultWards = [];
    for (let i = 1; i <= 15; i++) {
      defaultWards.push({
        id: i,
        name: `Ph∆∞·ªùng ${i}`,
      });
    }
    return defaultWards;
  }

  // Helper methods for UI feedback
  showLoadingIndicator(message) {
    // Create or update loading indicator
    let indicator = document.getElementById("location-loading-indicator");
    if (!indicator) {
      indicator = document.createElement("div");
      indicator.id = "location-loading-indicator";
      indicator.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #007bff;
                color: white;
                padding: 10px 15px;
                border-radius: 5px;
                z-index: 10000;
                font-size: 14px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            `;
      document.body.appendChild(indicator);
    }
    indicator.textContent = message;
    indicator.style.display = "block";
  }

  hideLoadingIndicator() {
    const indicator = document.getElementById("location-loading-indicator");
    if (indicator) {
      indicator.style.display = "none";
    }
  }

  showNotification(message, type = "info") {
    // Create notification element
    const notification = document.createElement("div");
    notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 5px;
            color: white;
            font-size: 14px;
            z-index: 10001;
            max-width: 300px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            animation: slideIn 0.3s ease-out;
        `;

    // Set background color based on type
    const colors = {
      success: "#28a745",
      error: "#dc3545",
      warning: "#ffc107",
      info: "#17a2b8",
    };
    notification.style.backgroundColor = colors[type] || colors.info;

    notification.textContent = message;
    document.body.appendChild(notification);

    // Auto remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.animation = "slideOut 0.3s ease-in";
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }
    }, 3000);
  }

  async onWardChange(point) {
    const provinceSelect =
      point === "A" ? this.pointAProvince : this.pointBProvince;
    const wardSelect = point === "A" ? this.pointAWard : this.pointBWard;
    const coordsSpan = point === "A" ? this.pointACoords : this.pointBCoords;

    const provinceId = provinceSelect.value;
    const wardId = wardSelect.value;

    if (wardId) {
      // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
      const provinceName =
        provinceSelect.options[provinceSelect.selectedIndex].text;
      const wardName = wardSelect.options[wardSelect.selectedIndex].text;

      const fullAddress = `${wardName}, ${provinceName}, Vi·ªát Nam`;
      coordsSpan.textContent = fullAddress;

      console.log(`ƒê·ªãa ch·ªâ ${point}:`, fullAddress);

      // Trigger event ƒë·ªÉ DistanceCalculator c√≥ th·ªÉ l·∫•y t·ªça ƒë·ªô
      const event = new CustomEvent("wardSelected", {
        detail: {
          point: point,
          address: fullAddress,
          provinceId: provinceId,
          wardId: wardId,
        },
      });
      document.dispatchEvent(event);
    }
  }

  // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
  getFullAddress(point) {
    const provinceSelect =
      point === "A" ? this.pointAProvince : this.pointBProvince;
    const wardSelect = point === "A" ? this.pointAWard : this.pointBWard;

    const provinceName =
      provinceSelect.options[provinceSelect.selectedIndex]?.text || "";
    const wardName = wardSelect.options[wardSelect.selectedIndex]?.text || "";

    if (provinceName && wardName) {
      return `${wardName}, ${provinceName}, Vi·ªát Nam`;
    }
    return null;
  }
}

// API ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam
class VietnamAddressAPI {
  constructor() {
    this.baseURL = "https://tailieu365.com/api/address";
    this.provinces = [];
    this.wards = {};
    this.districts = {};
    this.cache = new Map(); // Cache ƒë·ªÉ tr√°nh g·ªçi API nhi·ªÅu l·∫ßn
    this.cacheTimeout = 5 * 60 * 1000; // 5 ph√∫t
  }

  // S·ª≠ d·ª•ng CORS proxy ƒë·ªÉ tr√°nh l·ªói CORS
  async fetchWithProxy(url) {
    const proxies = [
      "https://api.allorigins.win/raw?url=", // Most reliable
      "https://cors-anywhere.herokuapp.com/",
      "https://api.codetabs.com/v1/proxy?quest=",
      "https://corsproxy.io/?",
      "https://thingproxy.freeboard.io/fetch/",
      "https://cors.bridged.cc/",
      "https://tailieu365.com/api/address",
      null, // Direct fetch as last resort
    ];

    for (let i = 0; i < proxies.length; i++) {
      try {
        const proxy = proxies[i];
        const targetUrl = proxy ? proxy + url : url;

        console.log(
          `üîÑ Trying proxy ${i + 1}/${proxies.length}: ${proxy || "direct"}`
        );

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

        const response = await fetch(targetUrl, {
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          mode: "cors",
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (response.ok) {
          console.log(`‚úÖ Success with proxy ${i + 1}/${proxies.length}`);
          return response;
        } else {
          console.log(
            `‚ùå Proxy ${i + 1}/${proxies.length} returned status: ${
              response.status
            }`
          );
        }
      } catch (error) {
        console.log(
          `‚ùå Proxy ${i + 1}/${proxies.length} failed:`,
          error.message
        );
        continue;
      }
    }

    // If all proxies fail, try server-side proxy
    console.log("üîÑ All CORS proxies failed, trying server-side proxy...");
    return await this.fetchWithServerProxy(url);
  }

  // Server-side proxy method
  async fetchWithServerProxy(url) {
    try {
      // Try to use a server-side proxy endpoint
      const serverProxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(
        url
      )}`;

      console.log("üîÑ Trying server-side proxy:", serverProxyUrl);

      const response = await fetch(serverProxyUrl, {
        method: "GET",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        mode: "cors",
      });

      if (response.ok) {
        const data = await response.json();
        if (data.contents) {
          // Parse the JSON content
          const parsedData = JSON.parse(data.contents);
          console.log("‚úÖ Server-side proxy success");
          return {
            ok: true,
            json: () => Promise.resolve(parsedData),
          };
        }
      }

      throw new Error("Server proxy failed");
    } catch (error) {
      console.error("‚ùå Server-side proxy failed:", error);
      throw new Error("All proxies and server proxy failed");
    }
  }

  // Cache helper methods
  getCacheKey(url) {
    return `api_${btoa(url)}`;
  }

  getFromCache(key) {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      console.log(`üì¶ Using cached data for: ${key}`);
      return cached.data;
    }
    return null;
  }

  setCache(key, data) {
    this.cache.set(key, {
      data: data,
      timestamp: Date.now(),
    });
    console.log(`üíæ Cached data for: ${key}`);
  }

  // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë v·ªõi retry mechanism
  async getProvinces(mode = 2, retryCount = 0) {
    const maxRetries = 2;

    try {
      const url = `${this.baseURL}/province?mode=${mode}`;
      const cacheKey = this.getCacheKey(url);

      // Ki·ªÉm tra cache tr∆∞·ªõc
      const cachedData = this.getFromCache(cacheKey);
      if (cachedData) {
        this.provinces = cachedData;
        console.log(`‚úÖ ƒê√£ t·∫£i ${cachedData.length} t·ªânh/th√†nh ph·ªë t·ª´ cache`);
        return cachedData;
      }

      console.log(
        `Fetching provinces from tailieu365.com API... (attempt ${
          retryCount + 1
        }/${maxRetries + 1})`
      );
      const response = await this.fetchWithProxy(url);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.provinces = data;

      // Cache the data
      this.setCache(cacheKey, data);

      console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} t·ªânh/th√†nh ph·ªë t·ª´ API`);
      console.log("üìä Sample data:", data.slice(0, 3));

      if (typeof showNotification === "function") {
        showNotification(
          `‚úÖ ƒê√£ t·∫£i ${data.length} t·ªânh/th√†nh ph·ªë t·ª´ API`,
          "success"
        );
      }

      return data;
    } catch (error) {
      console.error(
        `L·ªói khi l·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë (attempt ${retryCount + 1}):`,
        error
      );

      // Retry if we haven't exceeded max retries
      if (retryCount < maxRetries) {
        console.log(
          `üîÑ Retrying in 2 seconds... (${retryCount + 1}/${maxRetries})`
        );
        await new Promise((resolve) => setTimeout(resolve, 2000));
        return this.getProvinces(mode, retryCount + 1);
      }

      if (typeof showNotification === "function") {
        showNotification(
          "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh",
          "warning"
        );
      }
      return [];
    }
  }

  // L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh
  async getDistrictsByProvince(provinceId) {
    try {
      const url = `${this.baseURL}/district?provinceId=${provinceId}`;
      const response = await this.fetchWithProxy(url);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.districts[`province_${provinceId}`] = data;

      console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} qu·∫≠n/huy·ªán cho t·ªânh ${provinceId}`);
      return data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch qu·∫≠n/huy·ªán:", error);
      return [];
    }
  }

  // L·∫•y danh s√°ch x√£/ph∆∞·ªùng theo t·ªânh
  async getWardsByProvince(provinceId) {
    try {
      const url = `${this.baseURL}/ward?provinceId=${provinceId}`;
      const cacheKey = this.getCacheKey(url);

      // Ki·ªÉm tra cache tr∆∞·ªõc
      const cachedData = this.getFromCache(cacheKey);
      if (cachedData) {
        this.wards[`province_${provinceId}`] = cachedData;
        console.log(
          `‚úÖ ƒê√£ t·∫£i ${cachedData.length} x√£/ph∆∞·ªùng cho t·ªânh ${provinceId} t·ª´ cache`
        );
        return cachedData;
      }

      console.log(`üîÑ Fetching wards for province ${provinceId}...`);
      const response = await this.fetchWithProxy(url);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      this.wards[`province_${provinceId}`] = data;

      // Cache the data
      this.setCache(cacheKey, data);

      console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}`);
      return data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch x√£/ph∆∞·ªùng theo t·ªânh:", error);
      console.log("üîÑ Falling back to local data...");

      // Try to load from local JSON files
      try {
        const localData = await this.loadLocalWardsData(provinceId);
        if (localData && localData.length > 0) {
          console.log(
            `‚úÖ Loaded ${localData.length} wards from local data for province ${provinceId}`
          );
          this.wards[`province_${provinceId}`] = localData;
          return localData;
        }
      } catch (localError) {
        console.error("Local data load failed:", localError);
      }

      // Final fallback to hardcoded data
      console.log("üîÑ Using hardcoded fallback data...");
      return this.getFallbackWardsForProvince(provinceId);
    }
  }

  // Load wards data from local JSON files
  async loadLocalWardsData(provinceId) {
    try {
      // Try to load from local JSON file
      const response = await fetch(`/images/ward.json`);
      if (response.ok) {
        const allWards = await response.json();
        // Filter wards by province ID
        return allWards.filter((ward) => ward.provinceId == provinceId);
      }
    } catch (error) {
      console.error("Failed to load local wards data:", error);
    }
    return [];
  }

  // L·∫•y danh s√°ch x√£/ph∆∞·ªùng theo qu·∫≠n/huy·ªán
  async getWardsByDistrict(districtId) {
    try {
      const url = `${this.baseURL}/ward?districtId=${districtId}`;
      const response = await this.fetchWithProxy(url);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch x√£/ph∆∞·ªùng theo qu·∫≠n/huy·ªán:", error);
      return [];
    }
  }
}

// Add CSS animations for notifications
function addNotificationStyles() {
  if (document.getElementById("location-notification-styles")) return;

  const style = document.createElement("style");
  style.id = "location-notification-styles";
  style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
  document.head.appendChild(style);
}

// Kh·ªüi t·∫°o Location Selector khi trang ƒë∆∞·ª£c load
document.addEventListener("DOMContentLoaded", function () {
  // Add notification styles
  addNotificationStyles();
  // Kh·ªüi t·∫°o Location Selector
  const locationSelector = new VietnamLocationSelector();

  // L∆∞u instance v√†o global scope ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c script kh√°c
  window.vietnamLocationSelector = locationSelector;

  // Test API connection
  console.log("üß™ Testing API connection...");
  locationSelector.addressAPI
    .getProvinces(2)
    .then((provinces) => {
      if (provinces && provinces.length > 0) {
        console.log("‚úÖ API connection successful!");
        console.log("üìä Sample provinces:", provinces.slice(0, 5));

        // Test wards for first province
        if (provinces.length > 0) {
          const firstProvince = provinces[0];
          console.log(
            `üß™ Testing wards for province: ${firstProvince.name} (ID: ${firstProvince.id})`
          );
          locationSelector.addressAPI
            .getWardsByProvince(firstProvince.id)
            .then((wards) => {
              if (wards && wards.length > 0) {
                console.log(
                  `‚úÖ Wards API working! Found ${wards.length} wards for ${firstProvince.name}`
                );
                console.log("üìä Sample wards:", wards.slice(0, 3));
              } else {
                console.warn("‚ö†Ô∏è Wards API returned empty data");
              }
            })
            .catch((error) => {
              console.error("‚ùå Wards API failed:", error);
            });
        }
      } else {
        console.warn("‚ö†Ô∏è API returned empty data");
      }
    })
    .catch((error) => {
      console.error("‚ùå API connection failed:", error);
    });

  // Th√™m global function ƒë·ªÉ test API
  window.testVietnamAPI = function () {
    console.log("üß™ Manual API test...");
    locationSelector.addressAPI
      .getProvinces(2)
      .then((provinces) => {
        console.log("Provinces:", provinces);
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  };

  // Th√™m function ƒë·ªÉ clear cache
  window.clearVietnamAPICache = function () {
    locationSelector.addressAPI.cache.clear();
    console.log("üóëÔ∏è Cache cleared");
  };

  // Th√™m function ƒë·ªÉ xem cache status
  window.getVietnamAPICacheStatus = function () {
    console.log("üìä Cache status:", {
      size: locationSelector.addressAPI.cache.size,
      entries: Array.from(locationSelector.addressAPI.cache.entries()).map(
        ([key, value]) => ({
          key: key,
          age: Math.round((Date.now() - value.timestamp) / 1000) + "s ago",
        })
      ),
    });
  };

  // Th√™m function ƒë·ªÉ test API tr·ª±c ti·∫øp
  window.testDirectAPI = function () {
    console.log("üß™ Testing direct API call...");
    fetch("https://tailieu365.com/api/address/province?mode=2", {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    })
      .then((response) => {
        console.log("Direct API response status:", response.status);
        if (response.ok) {
          return response.json();
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      })
      .then((data) => {
        console.log("Direct API data:", data);
      })
      .catch((error) => {
        console.error("Direct API error:", error);
      });
  };
});
