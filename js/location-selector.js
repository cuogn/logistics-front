// Location Selector cho ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam
class VietnamLocationSelector {
    constructor() {
        this.addressAPI = new VietnamAddressAPI();
        this.initializeSelectors();
        this.loadProvinces();
    }

    initializeSelectors() {
        // ƒêi·ªÉm A
        this.pointAProvince = document.getElementById('pointAProvince');
        this.pointAWard = document.getElementById('pointAWard');
        this.pointACoords = document.getElementById('pointACoords');

        // ƒêi·ªÉm B
        this.pointBProvince = document.getElementById('pointBProvince');
        this.pointBWard = document.getElementById('pointBWard');
        this.pointBCoords = document.getElementById('pointBCoords');

        this.setupEventListeners();
    }

    setupEventListeners() {
        // ƒêi·ªÉm A
        this.pointAProvince.addEventListener('change', () => this.onProvinceChange('A'));
        this.pointAWard.addEventListener('change', () => this.onWardChange('A'));

        // ƒêi·ªÉm B
        this.pointBProvince.addEventListener('change', () => this.onProvinceChange('B'));
        this.pointBWard.addEventListener('change', () => this.onWardChange('B'));
    }

    async loadProvinces() {
        try {
            console.log('üîÑ ƒêang t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë t·ª´ API...');
            const provinces = await this.addressAPI.getProvinces(2); // mode=2 ƒë·ªÉ l·∫•y t·ªânh m·ªõi
            
            if (!provinces || provinces.length === 0) {
                console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh');
                // Fallback data
                const fallbackProvinces = [
                    { id: 1, name: 'H√† N·ªôi' },
                    { id: 2, name: 'TP. H·ªì Ch√≠ Minh' },
                    { id: 3, name: 'ƒê√† N·∫µng' },
                    { id: 4, name: 'H·∫£i Ph√≤ng' },
                    { id: 5, name: 'C·∫ßn Th∆°' }
                ];
                this.updateProvinceDropdowns(fallbackProvinces);
                return;
            }
            
            this.updateProvinceDropdowns(provinces);
            console.log(`‚úÖ ƒê√£ t·∫£i ${provinces.length} t·ªânh/th√†nh ph·ªë t·ª´ API`);
        } catch (error) {
            console.error('L·ªói khi t·∫£i danh s√°ch t·ªânh/th√†nh ph·ªë:', error);
            // Fallback data in case of error
            const fallbackProvinces = [
                { id: 1, name: 'H√† N·ªôi' },
                { id: 2, name: 'TP. H·ªì Ch√≠ Minh' },
                { id: 3, name: 'ƒê√† N·∫µng' },
                { id: 4, name: 'H·∫£i Ph√≤ng' },
                { id: 5, name: 'C·∫ßn Th∆°' }
            ];
            this.updateProvinceDropdowns(fallbackProvinces);
        }
    }

    updateProvinceDropdowns(provinces) {
        // C·∫≠p nh·∫≠t dropdown t·ªânh cho ƒëi·ªÉm A
        this.pointAProvince.innerHTML = '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
        provinces.forEach(province => {
            const option = document.createElement('option');
            option.value = province.id;
            option.textContent = province.name;
            this.pointAProvince.appendChild(option);
        });

        // C·∫≠p nh·∫≠t dropdown t·ªânh cho ƒëi·ªÉm B
        this.pointBProvince.innerHTML = '<option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>';
        provinces.forEach(province => {
            const option = document.createElement('option');
            option.value = province.id;
            option.textContent = province.name;
            this.pointBProvince.appendChild(option);
        });
    }

    async onProvinceChange(point) {
        const provinceSelect = point === 'A' ? this.pointAProvince : this.pointBProvince;
        const wardSelect = point === 'A' ? this.pointAWard : this.pointBWard;
        const coordsSpan = point === 'A' ? this.pointACoords : this.pointBCoords;

        const provinceId = provinceSelect.value;
        
        // Reset ward
        wardSelect.innerHTML = '<option value="">Ch·ªçn x√£/ph∆∞·ªùng</option>';
        wardSelect.disabled = true;
        coordsSpan.textContent = '--';

        if (provinceId) {
            try {
                console.log(`üîÑ ƒêang t·∫£i x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}...`);
                // L·∫•y x√£/ph∆∞·ªùng tr·ª±c ti·∫øp theo t·ªânh
                const wards = await this.addressAPI.getWardsByProvince(provinceId);
                
                if (!wards || wards.length === 0) {
                    console.warn(`Kh√¥ng c√≥ d·ªØ li·ªáu x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh`);
                    // Fallback wards
                    const fallbackWards = [
                        { id: 1, name: 'Ph∆∞·ªùng 1' },
                        { id: 2, name: 'Ph∆∞·ªùng 2' },
                        { id: 3, name: 'Ph∆∞·ªùng 3' },
                        { id: 4, name: 'Ph∆∞·ªùng 4' },
                        { id: 5, name: 'Ph∆∞·ªùng 5' }
                    ];
                    this.updateWardDropdown(wardSelect, fallbackWards);
                } else {
                    this.updateWardDropdown(wardSelect, wards);
                }
                
                wardSelect.disabled = false;
                console.log(`‚úÖ ƒê√£ t·∫£i ${wards ? wards.length : 0} x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}`);
            } catch (error) {
                console.error('L·ªói khi t·∫£i danh s√°ch x√£/ph∆∞·ªùng:', error);
                // Fallback wards in case of error
                const fallbackWards = [
                    { id: 1, name: 'Ph∆∞·ªùng 1' },
                    { id: 2, name: 'Ph∆∞·ªùng 2' },
                    { id: 3, name: 'Ph∆∞·ªùng 3' },
                    { id: 4, name: 'Ph∆∞·ªùng 4' },
                    { id: 5, name: 'Ph∆∞·ªùng 5' }
                ];
                this.updateWardDropdown(wardSelect, fallbackWards);
                wardSelect.disabled = false;
            }
        }
    }

    updateWardDropdown(wardSelect, wards) {
        // C·∫≠p nh·∫≠t dropdown x√£/ph∆∞·ªùng
        wards.forEach(ward => {
            const option = document.createElement('option');
            option.value = ward.id;
            option.textContent = ward.name;
            wardSelect.appendChild(option);
        });
    }

    async onWardChange(point) {
        const provinceSelect = point === 'A' ? this.pointAProvince : this.pointBProvince;
        const wardSelect = point === 'A' ? this.pointAWard : this.pointBWard;
        const coordsSpan = point === 'A' ? this.pointACoords : this.pointBCoords;

        const provinceId = provinceSelect.value;
        const wardId = wardSelect.value;

        if (wardId) {
            // T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
            const provinceName = provinceSelect.options[provinceSelect.selectedIndex].text;
            const wardName = wardSelect.options[wardSelect.selectedIndex].text;
            
            const fullAddress = `${wardName}, ${provinceName}, Vi·ªát Nam`;
            coordsSpan.textContent = fullAddress;
            
            console.log(`ƒê·ªãa ch·ªâ ${point}:`, fullAddress);
            
            // Trigger event ƒë·ªÉ DistanceCalculator c√≥ th·ªÉ l·∫•y t·ªça ƒë·ªô
            const event = new CustomEvent('wardSelected', {
                detail: {
                    point: point,
                    address: fullAddress,
                    provinceId: provinceId,
                    wardId: wardId
                }
            });
            document.dispatchEvent(event);
        }
    }

    // L·∫•y th√¥ng tin ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
    getFullAddress(point) {
        const provinceSelect = point === 'A' ? this.pointAProvince : this.pointBProvince;
        const wardSelect = point === 'A' ? this.pointAWard : this.pointBWard;

        const provinceName = provinceSelect.options[provinceSelect.selectedIndex]?.text || '';
        const wardName = wardSelect.options[wardSelect.selectedIndex]?.text || '';

        if (provinceName && wardName) {
            return `${wardName}, ${provinceName}, Vi·ªát Nam`;
        }
        return null;
    }
}

// API ƒë·ªãa ch·ªâ h√†nh ch√≠nh Vi·ªát Nam
class VietnamAddressAPI {
    constructor() {
        this.baseURL = 'https://tailieu365.com/api/address';
        this.provinces = [];
        this.wards = {};
        this.districts = {};
    }

    // S·ª≠ d·ª•ng CORS proxy ƒë·ªÉ tr√°nh l·ªói CORS
    async fetchWithProxy(url) {
        const proxies = [
            null, // Direct fetch
            'https://cors-anywhere.herokuapp.com/',
            'https://api.allorigins.win/raw?url=',
            'https://corsproxy.io/?'
        ];

        for (let i = 0; i < proxies.length; i++) {
            try {
                const proxy = proxies[i];
                const targetUrl = proxy ? proxy + url : url;
                
                console.log(`üîÑ Trying proxy ${i + 1}/${proxies.length}: ${proxy || 'direct'}`);
                
                const response = await fetch(targetUrl, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    mode: 'cors'
                });
                
                if (response.ok) {
                    console.log(`‚úÖ Success with proxy ${i + 1}/${proxies.length}`);
                    return response;
                }
            } catch (error) {
                console.log(`‚ùå Proxy ${i + 1}/${proxies.length} failed:`, error.message);
                continue;
            }
        }
        
        throw new Error('All proxies failed');
    }

    // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
    async getProvinces(mode = 2) {
        try {
            console.log('Fetching provinces from tailieu365.com API...');
            const url = `${this.baseURL}/province?mode=${mode}`;
            const response = await this.fetchWithProxy(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.provinces = data;
            
            console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} t·ªânh/th√†nh ph·ªë t·ª´ API`);
            console.log('üìä Sample data:', data.slice(0, 3));
            
            if (typeof showNotification === 'function') {
                showNotification(`‚úÖ ƒê√£ t·∫£i ${data.length} t·ªânh/th√†nh ph·ªë t·ª´ API`, 'success');
            }
            
            return data;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë:', error);
            if (typeof showNotification === 'function') {
                showNotification('‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh', 'warning');
            }
            return [];
        }
    }

    // L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh
    async getDistrictsByProvince(provinceId) {
        try {
            const url = `${this.baseURL}/district?provinceId=${provinceId}`;
            const response = await this.fetchWithProxy(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.districts[`province_${provinceId}`] = data;
            
            console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} qu·∫≠n/huy·ªán cho t·ªânh ${provinceId}`);
            return data;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch qu·∫≠n/huy·ªán:', error);
            return [];
        }
    }

    // L·∫•y danh s√°ch x√£/ph∆∞·ªùng theo t·ªânh
    async getWardsByProvince(provinceId) {
        try {
            const url = `${this.baseURL}/ward?provinceId=${provinceId}`;
            const response = await this.fetchWithProxy(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.wards[`province_${provinceId}`] = data;
            
            console.log(`‚úÖ ƒê√£ t·∫£i ${data.length} x√£/ph∆∞·ªùng cho t·ªânh ${provinceId}`);
            return data;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch x√£/ph∆∞·ªùng theo t·ªânh:', error);
            return [];
        }
    }

    // L·∫•y danh s√°ch x√£/ph∆∞·ªùng theo qu·∫≠n/huy·ªán
    async getWardsByDistrict(districtId) {
        try {
            const url = `${this.baseURL}/ward?districtId=${districtId}`;
            const response = await this.fetchWithProxy(url);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch x√£/ph∆∞·ªùng theo qu·∫≠n/huy·ªán:', error);
            return [];
        }
    }
}

// Kh·ªüi t·∫°o Location Selector khi trang ƒë∆∞·ª£c load
document.addEventListener('DOMContentLoaded', function() {
    // Kh·ªüi t·∫°o Location Selector
    const locationSelector = new VietnamLocationSelector();
    
    // L∆∞u instance v√†o global scope ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ c√°c script kh√°c
    window.vietnamLocationSelector = locationSelector;
    
    // Test API connection
    console.log('üß™ Testing API connection...');
    locationSelector.addressAPI.getProvinces(2).then(provinces => {
        if (provinces && provinces.length > 0) {
            console.log('‚úÖ API connection successful!');
            console.log('üìä Sample provinces:', provinces.slice(0, 5));
            
            // Test wards for first province
            if (provinces.length > 0) {
                const firstProvince = provinces[0];
                console.log(`üß™ Testing wards for province: ${firstProvince.name} (ID: ${firstProvince.id})`);
                locationSelector.addressAPI.getWardsByProvince(firstProvince.id).then(wards => {
                    if (wards && wards.length > 0) {
                        console.log(`‚úÖ Wards API working! Found ${wards.length} wards for ${firstProvince.name}`);
                        console.log('üìä Sample wards:', wards.slice(0, 3));
                    } else {
                        console.warn('‚ö†Ô∏è Wards API returned empty data');
                    }
                }).catch(error => {
                    console.error('‚ùå Wards API failed:', error);
                });
            }
        } else {
            console.warn('‚ö†Ô∏è API returned empty data');
        }
    }).catch(error => {
        console.error('‚ùå API connection failed:', error);
    });
    
    // Th√™m global function ƒë·ªÉ test API
    window.testVietnamAPI = function() {
        console.log('üß™ Manual API test...');
        locationSelector.addressAPI.getProvinces(2).then(provinces => {
            console.log('Provinces:', provinces);
        }).catch(error => {
            console.error('Error:', error);
        });
    };
}); 